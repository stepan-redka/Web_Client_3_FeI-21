{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Stepan\\\\Documents\\\\LAbs\\\\Web\\\\Lab_3\\\\react_test-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css'; // Додано імпорт стилів\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst testData = {\n  testName: \"Mountain Hiking Test\",\n  questions: [{\n    question: \"What is the highest mountain in the world?\",\n    answers: [{\n      answer: \"Mount Everest\",\n      isCorrect: true\n    }, {\n      answer: \"Mount Kilimanjaro\",\n      isCorrect: false\n    }, {\n      answer: \"K2\",\n      isCorrect: false\n    }, {\n      answer: \"Mount Fuji\",\n      isCorrect: false\n    }]\n  }, {\n    question: \"Which mountain range is known as the 'Roof of the World'?\",\n    answers: [{\n      answer: \"The Himalayas\",\n      isCorrect: true\n    }, {\n      answer: \"The Andes\",\n      isCorrect: false\n    }, {\n      answer: \"The Alps\",\n      isCorrect: false\n    }, {\n      answer: \"The Rockies\",\n      isCorrect: false\n    }]\n  }, {\n    question: \"What is the term for a mountain that has never been climbed?\",\n    answers: [{\n      answer: \"Virgin Peak\",\n      isCorrect: true\n    }, {\n      answer: \"Unclimbable Mountain\",\n      isCorrect: false\n    }, {\n      answer: \"Summitless Mountain\",\n      isCorrect: false\n    }, {\n      answer: \"Unscalable Peak\",\n      isCorrect: false\n    }]\n  }]\n};\nconst App = () => {\n  _s();\n  const [showTest, setShowTest] = useState(false);\n  const handleStartQuiz = () => {\n    setShowTest(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: !showTest ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Choose questions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStartQuiz,\n        children: \"Start Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Test, {\n      testData: testData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"H3Vp7izyl8dEwKOabFatf5UHoIs=\");\n_c = App;\nconst Test = ({\n  testData\n}) => {\n  _s2();\n  const [selectedAnswers, setSelectedAnswers] = useState(Array(testData.questions.length).fill(null));\n  const handleAnswerSelect = (index, answerIndex) => {\n    setSelectedAnswers(prevAnswers => {\n      const updatedAnswers = [...prevAnswers];\n      updatedAnswers[index] = answerIndex;\n      return updatedAnswers;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-container\",\n    children: testData.questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), question.answers.map((answer, answerIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          id: `answer-${index}-${answerIndex}`,\n          name: `answer-${index}`,\n          checked: selectedAnswers[index] === answerIndex,\n          onChange: () => handleAnswerSelect(index, answerIndex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `answer-${index}-${answerIndex}`,\n          children: answer.answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }, this)]\n      }, answerIndex, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this))]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s2(Test, \"INz0rQqxEGxrG5ipL+p3vVzWWxY=\");\n_c2 = Test;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Test\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","testData","testName","questions","question","answers","answer","isCorrect","App","_s","showTest","setShowTest","handleStartQuiz","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Test","_c","_s2","selectedAnswers","setSelectedAnswers","Array","length","fill","handleAnswerSelect","index","answerIndex","prevAnswers","updatedAnswers","map","type","id","name","checked","onChange","htmlFor","_c2","$RefreshReg$"],"sources":["C:/Users/Stepan/Documents/LAbs/Web/Lab_3/react_test-main/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css'; // Додано імпорт стилів\n\nconst testData = {\n  testName: \"Mountain Hiking Test\",\n  questions: [\n    {\n      question: \"What is the highest mountain in the world?\",\n      answers: [\n        {\n          answer: \"Mount Everest\",\n          isCorrect: true,\n        },\n        {\n          answer: \"Mount Kilimanjaro\",\n          isCorrect: false,\n        },\n        {\n          answer: \"K2\",\n          isCorrect: false,\n        },\n        {\n          answer: \"Mount Fuji\",\n          isCorrect: false,\n        }\n      ],\n    },\n    {\n      question: \"Which mountain range is known as the 'Roof of the World'?\",\n      answers: [\n        {\n          answer: \"The Himalayas\",\n          isCorrect: true,\n        },\n        {\n          answer: \"The Andes\",\n          isCorrect: false,\n        },\n        {\n          answer: \"The Alps\",\n          isCorrect: false,\n        },\n        {\n          answer: \"The Rockies\",\n          isCorrect: false,\n        }\n      ],\n    },\n    {\n      question: \"What is the term for a mountain that has never been climbed?\",\n      answers: [\n        {\n          answer: \"Virgin Peak\",\n          isCorrect: true,\n        },\n        {\n          answer: \"Unclimbable Mountain\",\n          isCorrect: false,\n        },\n        {\n          answer: \"Summitless Mountain\",\n          isCorrect: false,\n        },\n        {\n          answer: \"Unscalable Peak\",\n          isCorrect: false,\n        }\n      ],\n    }\n  ],\n};\n\nconst App = () => {\n  const [showTest, setShowTest] = useState(false);\n\n  const handleStartQuiz = () => {\n    setShowTest(true);\n  };\n\n  return (\n    <div className=\"App\">\n      {!showTest ? (\n        <div className=\"main-menu\">\n          <h2>Choose questions</h2>\n          <button onClick={handleStartQuiz}>Start Quiz</button>\n        </div>\n      ) : (\n        <Test testData={testData} />\n      )}\n    </div>\n  );\n};\n\nconst Test = ({ testData }) => {\n  const [selectedAnswers, setSelectedAnswers] = useState(Array(testData.questions.length).fill(null));\n\n  const handleAnswerSelect = (index, answerIndex) => {\n    setSelectedAnswers(prevAnswers => {\n      const updatedAnswers = [...prevAnswers];\n      updatedAnswers[index] = answerIndex;\n      return updatedAnswers;\n    });\n  };\n\n  return (\n    <div className=\"test-container\">\n      {testData.questions.map((question, index) => (\n        <div key={index} className=\"question-container\">\n          <h3>{question.question}</h3>\n          {question.answers.map((answer, answerIndex) => (\n            <div key={answerIndex} className=\"answer-container\">\n              <input\n                type=\"radio\"\n                id={`answer-${index}-${answerIndex}`}\n                name={`answer-${index}`}\n                checked={selectedAnswers[index] === answerIndex}\n                onChange={() => handleAnswerSelect(index, answerIndex)}\n              />\n              <label htmlFor={`answer-${index}-${answerIndex}`}>{answer.answer}</label>\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,QAAQ,GAAG;EACfC,QAAQ,EAAE,sBAAsB;EAChCC,SAAS,EAAE,CACT;IACEC,QAAQ,EAAE,4CAA4C;IACtDC,OAAO,EAAE,CACP;MACEC,MAAM,EAAE,eAAe;MACvBC,SAAS,EAAE;IACb,CAAC,EACD;MACED,MAAM,EAAE,mBAAmB;MAC3BC,SAAS,EAAE;IACb,CAAC,EACD;MACED,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE;IACb,CAAC,EACD;MACED,MAAM,EAAE,YAAY;MACpBC,SAAS,EAAE;IACb,CAAC;EAEL,CAAC,EACD;IACEH,QAAQ,EAAE,2DAA2D;IACrEC,OAAO,EAAE,CACP;MACEC,MAAM,EAAE,eAAe;MACvBC,SAAS,EAAE;IACb,CAAC,EACD;MACED,MAAM,EAAE,WAAW;MACnBC,SAAS,EAAE;IACb,CAAC,EACD;MACED,MAAM,EAAE,UAAU;MAClBC,SAAS,EAAE;IACb,CAAC,EACD;MACED,MAAM,EAAE,aAAa;MACrBC,SAAS,EAAE;IACb,CAAC;EAEL,CAAC,EACD;IACEH,QAAQ,EAAE,8DAA8D;IACxEC,OAAO,EAAE,CACP;MACEC,MAAM,EAAE,aAAa;MACrBC,SAAS,EAAE;IACb,CAAC,EACD;MACED,MAAM,EAAE,sBAAsB;MAC9BC,SAAS,EAAE;IACb,CAAC,EACD;MACED,MAAM,EAAE,qBAAqB;MAC7BC,SAAS,EAAE;IACb,CAAC,EACD;MACED,MAAM,EAAE,iBAAiB;MACzBC,SAAS,EAAE;IACb,CAAC;EAEL,CAAC;AAEL,CAAC;AAED,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMc,eAAe,GAAGA,CAAA,KAAM;IAC5BD,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;EAED,oBACEX,OAAA;IAAKa,SAAS,EAAC,KAAK;IAAAC,QAAA,EACjB,CAACJ,QAAQ,gBACRV,OAAA;MAAKa,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBd,OAAA;QAAAc,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBlB,OAAA;QAAQmB,OAAO,EAAEP,eAAgB;QAAAE,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,gBAENlB,OAAA,CAACoB,IAAI;MAACnB,QAAQ,EAAEA;IAAS;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAC5B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACT,EAAA,CAnBID,GAAG;AAAAa,EAAA,GAAHb,GAAG;AAqBT,MAAMY,IAAI,GAAGA,CAAC;EAAEnB;AAAS,CAAC,KAAK;EAAAqB,GAAA;EAC7B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAG1B,QAAQ,CAAC2B,KAAK,CAACxB,QAAQ,CAACE,SAAS,CAACuB,MAAM,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAEnG,MAAMC,kBAAkB,GAAGA,CAACC,KAAK,EAAEC,WAAW,KAAK;IACjDN,kBAAkB,CAACO,WAAW,IAAI;MAChC,MAAMC,cAAc,GAAG,CAAC,GAAGD,WAAW,CAAC;MACvCC,cAAc,CAACH,KAAK,CAAC,GAAGC,WAAW;MACnC,OAAOE,cAAc;IACvB,CAAC,CAAC;EACJ,CAAC;EAED,oBACEhC,OAAA;IAAKa,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5Bb,QAAQ,CAACE,SAAS,CAAC8B,GAAG,CAAC,CAAC7B,QAAQ,EAAEyB,KAAK,kBACtC7B,OAAA;MAAiBa,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBAC7Cd,OAAA;QAAAc,QAAA,EAAKV,QAAQ,CAACA;MAAQ;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAC3Bd,QAAQ,CAACC,OAAO,CAAC4B,GAAG,CAAC,CAAC3B,MAAM,EAAEwB,WAAW,kBACxC9B,OAAA;QAAuBa,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBACjDd,OAAA;UACEkC,IAAI,EAAC,OAAO;UACZC,EAAE,EAAG,UAASN,KAAM,IAAGC,WAAY,EAAE;UACrCM,IAAI,EAAG,UAASP,KAAM,EAAE;UACxBQ,OAAO,EAAEd,eAAe,CAACM,KAAK,CAAC,KAAKC,WAAY;UAChDQ,QAAQ,EAAEA,CAAA,KAAMV,kBAAkB,CAACC,KAAK,EAAEC,WAAW;QAAE;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD,CAAC,eACFlB,OAAA;UAAOuC,OAAO,EAAG,UAASV,KAAM,IAAGC,WAAY,EAAE;UAAAhB,QAAA,EAAER,MAAM,CAACA;QAAM;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GARjEY,WAAW;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAShB,CACN,CAAC;IAAA,GAbMW,KAAK;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAcV,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACI,GAAA,CAhCIF,IAAI;AAAAoB,GAAA,GAAJpB,IAAI;AAkCV,eAAeZ,GAAG;AAAC,IAAAa,EAAA,EAAAmB,GAAA;AAAAC,YAAA,CAAApB,EAAA;AAAAoB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}