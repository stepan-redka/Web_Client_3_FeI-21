{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Stepan\\\\Documents\\\\LAbs\\\\Web\\\\Lab_3\\\\react_test-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport QuestionSelector from './QuestionSelector';\nimport Test from './Test';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst testData = {\n  testName: \"Bakery Test\",\n  questions: [{\n    question: \"Which ingredient is essential for making bread rise?\",\n    answers: [{\n      answer: \"Yeast\",\n      isCorrect: true\n    }, {\n      answer: \"Sugar\",\n      isCorrect: false\n    }, {\n      answer: \"Salt\",\n      isCorrect: false\n    }, {\n      answer: \"Butter\",\n      isCorrect: false\n    }]\n  }, {\n    question: \"What is the main ingredient in croissants?\",\n    answers: [{\n      answer: \"Butter\",\n      isCorrect: true\n    }, {\n      answer: \"Sugar\",\n      isCorrect: false\n    }, {\n      answer: \"Flour\",\n      isCorrect: false\n    }, {\n      answer: \"Eggs\",\n      isCorrect: false\n    }]\n  }, {\n    question: \"What type of flour is typically used to make cakes?\",\n    answers: [{\n      answer: \"Cake flour\",\n      isCorrect: true\n    }, {\n      answer: \"All-purpose flour\",\n      isCorrect: false\n    }, {\n      answer: \"Whole wheat flour\",\n      isCorrect: false\n    }, {\n      answer: \"Bread flour\",\n      isCorrect: false\n    }]\n  }]\n};\nconst App = () => {\n  _s();\n  const [selectedQuestions, setSelectedQuestions] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const handleQuestionsSelect = selectedQuestions => {\n    setSelectedQuestions(selectedQuestions);\n    setShowResult(false);\n    setErrorMessage(\"\");\n  };\n  const handleShowResult = () => {\n    if (selectedQuestions.length === 0) {\n      setErrorMessage(\"Please select at least one question.\");\n    } else {\n      setShowResult(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: selectedQuestions.length === 0 ? /*#__PURE__*/_jsxDEV(QuestionSelector, {\n      testData: testData,\n      onQuestionsSelect: handleQuestionsSelect,\n      onStartQuiz: handleShowResult,\n      errorMessage: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Test, {\n      selectedQuestions: selectedQuestions,\n      testData: testData,\n      onShowResult: handleShowResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"/zZuamEgBGIVWMAOciLsqNME6SU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","QuestionSelector","Test","jsxDEV","_jsxDEV","testData","testName","questions","question","answers","answer","isCorrect","App","_s","selectedQuestions","setSelectedQuestions","showResult","setShowResult","errorMessage","setErrorMessage","handleQuestionsSelect","handleShowResult","length","className","children","onQuestionsSelect","onStartQuiz","fileName","_jsxFileName","lineNumber","columnNumber","onShowResult","_c","$RefreshReg$"],"sources":["C:/Users/Stepan/Documents/LAbs/Web/Lab_3/react_test-main/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport QuestionSelector from './QuestionSelector';\nimport Test from './Test';\n\nconst testData = {\n  testName: \"Bakery Test\",\n  questions: [\n    {\n      question: \"Which ingredient is essential for making bread rise?\",\n      answers: [\n        { answer: \"Yeast\", isCorrect: true },\n        { answer: \"Sugar\", isCorrect: false },\n        { answer: \"Salt\", isCorrect: false },\n        { answer: \"Butter\", isCorrect: false }\n      ],\n    },\n    {\n      question: \"What is the main ingredient in croissants?\",\n      answers: [\n        { answer: \"Butter\", isCorrect: true },\n        { answer: \"Sugar\", isCorrect: false },\n        { answer: \"Flour\", isCorrect: false },\n        { answer: \"Eggs\", isCorrect: false }\n      ],\n    },\n    {\n      question: \"What type of flour is typically used to make cakes?\",\n      answers: [\n        { answer: \"Cake flour\", isCorrect: true },\n        { answer: \"All-purpose flour\", isCorrect: false },\n        { answer: \"Whole wheat flour\", isCorrect: false },\n        { answer: \"Bread flour\", isCorrect: false }\n      ],\n    }\n  ],\n};\n\nconst App = () => {\n  const [selectedQuestions, setSelectedQuestions] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleQuestionsSelect = (selectedQuestions) => {\n    setSelectedQuestions(selectedQuestions);\n    setShowResult(false);\n    setErrorMessage(\"\");\n  };\n\n  const handleShowResult = () => {\n    if (selectedQuestions.length === 0) {\n      setErrorMessage(\"Please select at least one question.\");\n    } else {\n      setShowResult(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {selectedQuestions.length === 0 ? (\n        <QuestionSelector\n          testData={testData}\n          onQuestionsSelect={handleQuestionsSelect}\n          onStartQuiz={handleShowResult}\n          errorMessage={errorMessage}\n        />\n      ) : (\n        <Test\n          selectedQuestions={selectedQuestions}\n          testData={testData}\n          onShowResult={handleShowResult}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}