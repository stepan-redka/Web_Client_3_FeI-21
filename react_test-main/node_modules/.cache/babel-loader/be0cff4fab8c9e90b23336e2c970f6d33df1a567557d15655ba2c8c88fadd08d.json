{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Stepan\\\\Documents\\\\LAbs\\\\Web\\\\Lab_3\\\\react_test-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport QuestionSelector from './QuestionSelector';\nimport Test from './Test';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst testData = {\n  testName: \"Mountain Hiking Test\",\n  questions: [{\n    question: \"What is the highest mountain in the world?\",\n    answers: [{\n      answer: \"Mount Everest\",\n      isCorrect: true\n    }, {\n      answer: \"Mount Kilimanjaro\",\n      isCorrect: false\n    }, {\n      answer: \"K2\",\n      isCorrect: false\n    }, {\n      answer: \"Mount Fuji\",\n      isCorrect: false\n    }]\n  }, {\n    question: \"Which mountain range is known as the 'Roof of the World'?\",\n    answers: [{\n      answer: \"The Himalayas\",\n      isCorrect: true\n    }, {\n      answer: \"The Andes\",\n      isCorrect: false\n    }, {\n      answer: \"The Alps\",\n      isCorrect: false\n    }, {\n      answer: \"The Rockies\",\n      isCorrect: false\n    }]\n  }, {\n    question: \"What is the term for a mountain that has never been climbed?\",\n    answers: [{\n      answer: \"Virgin Peak\",\n      isCorrect: true\n    }, {\n      answer: \"Unclimbable Mountain\",\n      isCorrect: false\n    }, {\n      answer: \"Summitless Mountain\",\n      isCorrect: false\n    }, {\n      answer: \"Unscalable Peak\",\n      isCorrect: false\n    }]\n  }]\n};\nconst App = () => {\n  _s();\n  const [selectedQuestions, setSelectedQuestions] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const handleQuestionsSelect = selectedQuestions => {\n    setSelectedQuestions(selectedQuestions);\n    setShowResult(false);\n  };\n  const handleShowResult = () => {\n    setShowResult(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: !showResult ? selectedQuestions.length === 0 ? /*#__PURE__*/_jsxDEV(QuestionSelector, {\n      testData: testData,\n      onQuestionsSelect: handleQuestionsSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Test, {\n      selectedQuestions: selectedQuestions,\n      testData: testData,\n      onShowResult: handleShowResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Test Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TestResult, {\n        selectedQuestions: selectedQuestions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"re5vCl7hbolBTCw+VAvEo5F5wuc=\");\n_c = App;\nconst TestResult = ({\n  selectedQuestions\n}) => {\n  const totalQuestions = selectedQuestions.length;\n  const correctAnswers = selectedQuestions.filter(question => question.isCorrect).length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"User Score: \", correctAnswers, \"/\", totalQuestions]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_c2 = TestResult;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"TestResult\");","map":{"version":3,"names":["React","useState","QuestionSelector","Test","jsxDEV","_jsxDEV","testData","testName","questions","question","answers","answer","isCorrect","App","_s","selectedQuestions","setSelectedQuestions","showResult","setShowResult","handleQuestionsSelect","handleShowResult","className","children","length","onQuestionsSelect","fileName","_jsxFileName","lineNumber","columnNumber","onShowResult","TestResult","_c","totalQuestions","correctAnswers","filter","_c2","$RefreshReg$"],"sources":["C:/Users/Stepan/Documents/LAbs/Web/Lab_3/react_test-main/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport QuestionSelector from './QuestionSelector';\nimport Test from './Test';\n\nconst testData = {\n  testName: \"Mountain Hiking Test\",\n  questions: [\n    {\n      question: \"What is the highest mountain in the world?\",\n      answers: [\n        {\n          answer: \"Mount Everest\",\n          isCorrect: true,\n        },\n        {\n          answer: \"Mount Kilimanjaro\",\n          isCorrect: false,\n        },\n        {\n          answer: \"K2\",\n          isCorrect: false,\n        },\n        {\n          answer: \"Mount Fuji\",\n          isCorrect: false,\n        }\n      ],\n    },\n    {\n      question: \"Which mountain range is known as the 'Roof of the World'?\",\n      answers: [\n        {\n          answer: \"The Himalayas\",\n          isCorrect: true,\n        },\n        {\n          answer: \"The Andes\",\n          isCorrect: false,\n        },\n        {\n          answer: \"The Alps\",\n          isCorrect: false,\n        },\n        {\n          answer: \"The Rockies\",\n          isCorrect: false,\n        }\n      ],\n    },\n    {\n      question: \"What is the term for a mountain that has never been climbed?\",\n      answers: [\n        {\n          answer: \"Virgin Peak\",\n          isCorrect: true,\n        },\n        {\n          answer: \"Unclimbable Mountain\",\n          isCorrect: false,\n        },\n        {\n          answer: \"Summitless Mountain\",\n          isCorrect: false,\n        },\n        {\n          answer: \"Unscalable Peak\",\n          isCorrect: false,\n        }\n      ],\n    }\n  ],\n};\n\nconst App = () => {\n  const [selectedQuestions, setSelectedQuestions] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n\n  const handleQuestionsSelect = (selectedQuestions) => {\n    setSelectedQuestions(selectedQuestions);\n    setShowResult(false);\n  };\n\n  const handleShowResult = () => {\n    setShowResult(true);\n  };\n\n  return (\n    <div className=\"App\">\n      {!showResult ? (\n        selectedQuestions.length === 0 ? (\n          <QuestionSelector testData={testData} onQuestionsSelect={handleQuestionsSelect} />\n        ) : (\n          <Test selectedQuestions={selectedQuestions} testData={testData} onShowResult={handleShowResult} />\n        )\n      ) : (\n        <div>\n          <h2>Test Results</h2>\n          <TestResult selectedQuestions={selectedQuestions} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst TestResult = ({ selectedQuestions }) => {\n  const totalQuestions = selectedQuestions.length;\n  const correctAnswers = selectedQuestions.filter(question => question.isCorrect).length;\n\n  return (\n    <div>\n      <p>User Score: {correctAnswers}/{totalQuestions}</p>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}